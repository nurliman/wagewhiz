diff --git a/src/serde/mod.rs b/src/serde/mod.rs
index fadc443..6a435dd 100644
--- a/src/serde/mod.rs
+++ b/src/serde/mod.rs
@@ -102,7 +102,7 @@ use serde::{Deserialize, Deserializer, Serialize, Serializer};
 ///     maybe_dt: Option<OffsetDateTime>,
 /// }
 /// ```
-/// 
+///
 /// Define the format separately to be used in multiple places:
 /// ```rust,no_run
 /// # use time::OffsetDateTime;
@@ -153,7 +153,7 @@ use serde::{Deserialize, Deserializer, Serialize, Serializer};
 ///     let str_ts = OffsetDateTime::now_utc().format(DATE_TIME_FORMAT).unwrap();
 /// }
 /// ```
-/// 
+///
 /// Customize the configuration of ISO 8601 formatting/parsing:
 /// ```rust,no_run
 /// # use time::OffsetDateTime;
@@ -201,7 +201,7 @@ use serde::{Deserialize, Deserializer, Serialize, Serializer};
 /// }
 /// # fn main() {}
 /// ```
-/// 
+///
 /// [`format_description::parse()`]: crate::format_description::parse()
 #[cfg(all(feature = "macros", any(feature = "formatting", feature = "parsing"),))]
 pub use time_macros::serde_format_description as format_description;
@@ -224,6 +224,14 @@ const DATE_FORMAT: &[BorrowedFormatItem<'_>] = &[
 
 impl Serialize for Date {
     fn serialize<S: Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {
+        #[cfg(feature = "serde-well-known")]
+        if cfg!(feature = "serde-well-known") {
+            let Ok(s) = self.format(&DATE_FORMAT) else {
+                return Err(serde::ser::Error::custom("failed formatting `Date`"));
+            };
+            return serializer.serialize_str(&s);
+        }
+
         #[cfg(feature = "serde-human-readable")]
         if serializer.is_human_readable() {
             let Ok(s) = self.format(&DATE_FORMAT) else {
@@ -238,7 +246,9 @@ impl Serialize for Date {
 
 impl<'a> Deserialize<'a> for Date {
     fn deserialize<D: Deserializer<'a>>(deserializer: D) -> Result<Self, D::Error> {
-        if cfg!(feature = "serde-human-readable") && deserializer.is_human_readable() {
+        if cfg!(feature = "serde-well-known") {
+            deserializer.deserialize_any(Visitor::<Self>(PhantomData))
+        } else if cfg!(feature = "serde-human-readable") && deserializer.is_human_readable() {
             deserializer.deserialize_any(Visitor::<Self>(PhantomData))
         } else {
             deserializer.deserialize_tuple(2, Visitor::<Self>(PhantomData))
@@ -287,6 +297,11 @@ const OFFSET_DATE_TIME_FORMAT: &[BorrowedFormatItem<'_>] = &[
 
 impl Serialize for OffsetDateTime {
     fn serialize<S: Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {
+        if cfg!(feature = "serde-well-known") {
+            // Serialize as RFC3339
+            return rfc3339::serialize(self, serializer);
+        }
+
         #[cfg(feature = "serde-human-readable")]
         if serializer.is_human_readable() {
             let Ok(s) = self.format(&OFFSET_DATE_TIME_FORMAT) else {
@@ -312,7 +327,10 @@ impl Serialize for OffsetDateTime {
 
 impl<'a> Deserialize<'a> for OffsetDateTime {
     fn deserialize<D: Deserializer<'a>>(deserializer: D) -> Result<Self, D::Error> {
-        if cfg!(feature = "serde-human-readable") && deserializer.is_human_readable() {
+        if cfg!(feature = "serde-well-known") {
+            // Deserialize as RFC3339
+            return rfc3339::deserialize(deserializer);
+        } else if cfg!(feature = "serde-human-readable") && deserializer.is_human_readable() {
             deserializer.deserialize_any(Visitor::<Self>(PhantomData))
         } else {
             deserializer.deserialize_tuple(9, Visitor::<Self>(PhantomData))
